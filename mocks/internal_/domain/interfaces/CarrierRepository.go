// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "shipping-management/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// CarrierRepository is an autogenerated mock type for the CarrierRepository type
type CarrierRepository struct {
	mock.Mock
}

// GetCarriersByRegion provides a mock function with given fields: ctx, uuid
func (_m *CarrierRepository) GetCarriersByRegion(ctx context.Context, uuid string) ([]entities.Carrier, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetCarriersByRegion")
	}

	var r0 []entities.Carrier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entities.Carrier, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entities.Carrier); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Carrier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegionByState provides a mock function with given fields: state
func (_m *CarrierRepository) GetRegionByState(state string) string {
	ret := _m.Called(state)

	if len(ret) == 0 {
		panic("no return value specified for GetRegionByState")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(state)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewCarrierRepository creates a new instance of CarrierRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCarrierRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CarrierRepository {
	mock := &CarrierRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
